let timestamp = Date.now(); // Текущее время как отметка времени (число).
let now = new Date(); // Текущее время как объект Date.
let ms = now.getTime(); // Преобразовать в миллисекундную отметку времени.
let iso = now.toISOString(); // Преобразовать в строку со стандартнымформатом.
----------
Класс Date является API-интерфейсом JavaScript для работы с датой и временем.
Объект Date создается с помощью конструктора Date(). При вызове без
аргументов он возвращает объект Date, который представляет текущую дату и
время:

let now = new Date(); // Текущее время

Если вы передаете один числовой аргумент, то конструктор Date () интерпретирует
его как количество миллисекунд, прошедших с 1 января 1970 года:
let epoch = new Date(0); // Полночь, 1 января 1970 года, гринвичское среднее время

Если вы указываете два или больше целочисленных аргумента, то они интер
претируются как год, месяц, день недели, часы, минуты, секунды и миллисекунды
в вашем локальном часовом поясе:

let century = new Date(2100,             // год 2100
		       0,                // Январь
	       	       1,                // 1-e
	   	       2, 3, 4, 5);      // 02:03:04.005, локальное время

Если вы опустите поля времени, то конструктор Date() по умолчанию выберет для
них значения 0, устанавливая время в полночь.

let century = new Date(Date.UTC(2100, 0, 1)) ; // Полночь в Англии, 1 января 2100 года
- - - - -
let d = new Date(); // Начать с текущей даты
d.setFullYear(d.getFullYear() + 1); // Инкрементировать год

Для получения или установки других полей в Date замените “FullYear”
в имени метода строками “Month”, “Date”, “Hours”, “Minutes”, “Seconds” или
“Milliseconds”. Некоторые методы установки даты дают возможность устанавливать
сразу более одного поля. Методы setFullYear() и setUTCFullYear()
также дополнительно позволяют устанавливать месяц и день месяца. А методы
setHours() и setUTCHours() помимо поля часов разрешают устанавливать
поля минут, секунд и миллисекунд

Обратите внимание, что методы для запрашивания дня месяца называются
getDate() и getUTCDate(). Более естественно именованные методы getDay()
и getUTCDay() возвращают день недели (от 0 для воскресенья до 6 для субботы).
Поле дня недели доступно только для чтения, поэтому соответствующего
метода setDay() не предусмотрено.
----ОТМЕТКИ ВРЕМЕНИ----
let startTime = Date.now();
reticulateSplines(); // Выполнить операцию, отнимающую много времени
let endTime = Date.now() ;
console.log('Spline reticulation took ${endTime - startTime}ms.' ) 
- - - - -
performance.now():
она тоже возвращает отметку времени, основанную на миллисекундах, но
возвращаемое значение — не целое число, а потому оно включает доли миллисекунды.
Значение, возвращаемое performance.now(), не является абсолютной
отметкой времени как значение Date.now(). Взамен оно просто
указывает, сколько времени прошло с момента загрузки веб-страницы или с
момента запуска процесса Node.
- - - - -
Чтобы выполнять арифметические действия, включающие
в себя дни, месяцы и годы, можно применять методы setDate(), setMonth() и setYear()

ниже показан код, который добавляет к текущей дате
*РИ месяца и две недели:
let d = new Date();
d.setMonth(d.getMonth() + 3, d.getDate() + 14);
----------Форматирование и разбор строк с датами------------
let d = new Date (2020, 0, 1, 17, 10, 30); // 5:10:30pm, день Нового 2020
d.toString() // => "Wed Jan 01 2020 17:10:30 GMT-0800 (Pacific Standard Time)"
d.toUTCString() // => "Thu, 02 Jan 2020 01:10:30 GMT"
d.toLocaleDateString()  // => "1/1/2020": локаль fen-US*
d.toLocaleTimeString()  // => "5:10:30 PM": локаль *en-US*
d.toISOString()  // => "2020-01-02T01:10:30.000Z"
 
Ниже представлен полный список методов строкового форматирования в
классе Date.
• toString() . Этот метод применяет локальный часовой пояс, но не форматирует
дату и время с учетом локали.
• toUTCString() . Этот метод использует часовой пояс UTC, но не форматирует
дату и время с учетом локали.
• toISOString() . Этот метод выводит дату и время в формате год-месяц-
день часы:минуты:секунды.миллисекунды стандарта ISO-8601. Буква “Т” в
выводе отделяет порцию даты от порции времени. Время выражается в
UTC, на что указывает буква “Z” в конце вывода.
• toLocaleString() . Этот метод применяет локальный часовой пояс и
формат, соответствующий локали пользователя.
• toDatestring() . Этот метод форматирует только порцию даты объекта
Date, опуская время. Он использует локальный часовой пояс и не выполняет
форматирование, соответствующее локали.
• toLocaleDateString() . Этот метод форматирует только дату. Он применяет
локальный часовой пояс и формат, соответствующий локали.
• toTimeString() . Этот метод форматирует только время, опуская дату.
Он использует локальный часовой пояс, но не выполняет форматирование
времени, соответствующее локали.
• toLocaleTimeString() . Этот метод форматирует время в соответствии с
локалью и применяет локальный часовой пояс.

Наконец, в дополнение к методам, преобразующим объект Date в строку,
имеется также статический метод Date.parse(), который принимает в своем
аргументе строку, пытается разобрать ее как дату и время и возвращает отметку
времени, представляющую эту дату. Метод Date.parse() способен разбирать
такие же строки, как и конструктор Date(), и гарантированно может проводить
разбор вывода методов toISOString() , toUTCString() и toString() .














