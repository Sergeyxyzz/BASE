setTimeout(() => { console.log("Ready..."); }, 1000);
setTimeout(() => { console.log("set...”); }, 2000);
setTimeout(() => { console.log("go!"); ), 3000);
- - - - -
// Раз в секунду: очистить консоль и вывести текущее время.
let clock = setlnterval(() => {
  console.clear();
  console.log(new Date().toLocaleTimeString()); }, 1000); // ЛОКАЛЬНОЕ ВРЕМЯ HH:MM:SS
// Спустя 10 секунд: прекратить повторение выполнения кода выше.
setTimeout(() => { clearlnterval(clock); }, 10000);
- - - - -
setTimeout(checkForUpdates, 60000);
- - - - -
// Вызвать checkForUpdates через одну минуту и после этого
// снова каждую минуту.
let updatelntervalld = setInterval(checkForUpdates, 60000);
// setlnterval () возвращает значение, которое можно использовать
// для останова повторяющихся вызовов, передав его clear Interval О •
// (Аналогично setTimeout() возвращает значение,
// которое можно передать clear Timeout () .)
function stopCheckingForUpdates() {
  clearInterval(updatelntervalld);
}
------------события-----------
Когда пользователь нажимает клавишу на клавиатуре,
перемещает указатель мыши, щелкает кнопкой мыши или касается сенсорного
экрана, веб-браузер генерирует событие.
Программа JavaScript, управляемая
событиями, регистрирует функции обратного вызова для указанных типов
событий в заданных контекстах, а веб-браузер вызывает такие функции всякий
раз, когда происходит указанные события. Эти функции обратного вызова называются
обработчиками событий или прослушиватепями событий и регистрируются с помощью addEventListener():

// Запросить у веб-браузера возврат объекта, представляющего HTML-
// элемент <button>, который соответствует этому селектору CSS.
let okay = document.querySelector('#confirmUpdateDialog button.okay');
// Зарегистрировать функцию обратного вызова, которая должна
// вызываться, когда пользователь щелкает на данной кнопке,
okay.addEventListener('click', applyUpdate);
-----------события сети--------
function getCurrentVersionNumber(versionCallback) { //Обратите внимание на аргумент.
// Сделать HTTP-запрос к API-интерфейсу версии сервера,
let request = new XMLHttpRequest() ;
request.open("GET", "http://www.example.com/api/version" );
request.send();
// Зарегистрировать обратный вызов, который будет вызываться при поступлении ответа.
request.onload = function() {
  if (request.status === 200) {
    // Если состояние HTTP нормально, тогда получить
    // номер версии и вызвать обратный вызов,
    let currentVersion = parseFloat(request.responseText);
    versionCallback(null, currentVersion);
  } else {
    // В противном случае сообщить обратному вызову об ошибке.
    versionCallback(response.statusText, null);
  }
  // Зарегистрировать еще один обратный вызов, который будет
  // вызываться при возникновении ошибок сети,
  request.onerror = request.ontimeout = function(e) {
    versionCallback(e.type, null);
  }
};
---------PROMISE------------
getJSON(url).then(jsonData => {
// Это функция обратного вызова, которая будет вызываться
// асинхронным образом с разобранным значением JS0N,
// когда оно становится доступным.
});
- - - - -
// Предположим, что есть функция вроде этой для отображения
// профиля пользователя.
function displayUserProfile (profile) { /* реализация опущена */ }
// Вот как можно было бы использовать эту функцию с объектом Promise.
// Обратите внимание, что данная строка кода читается
// почти как предложение на английском языке:
getJSON("/api/user/profile").then(displayUserProfile);
- - - - -
код для обработки ошибок
getJSON("/api/user/profile").then(displayUserProfile, handleProfileError);
Когда нормально завершается асинхронное вычисление, основанное на Promise, оно передает
свой результат функции, которая является первым аргументом then().

Взамен асинхронные вычисления на основе Promise передают исключение
(Обычно как объект Error какого-то вида, хотя это не обязательно) второй
Функции, переданной then(). Таким образом, если в показанном выше коде
Функция getJSON() выполняется нормально, тогда она передает свой результат DisplayUserProfile(). В случае возникновения ошибки - пользователь
не вошел в систему, сервер не работает, подключение к Интернету пользователя Разорвано, случился тайм-аут запроса и т.д., функция getJSON() передает
handleProfileError() объект Error.
На практике методу then() редко передаются две функции.

Более идиоматичный способ обработки ошибок в данном коде выглядит сле-
дующим образом:
getJSON("/api/user/profile").then(displayUserProfile).catch(handleProfileError);

- - - - - FETCH - - - - 

fetch(documentURL) // Сделать HTTP-запрос.
  .then(response => response.json()) // Затребовать тело JSON ответа.
  .then(document => { // Когда получены разобранные данные JSON,
    return render(document); //отобразить документ пользователю.
  })
  .then(rendered => { // Когда получен визуализированный документ,
    cacheInDatabase(rendered); // кешировать его в локальной базе данных.
  })
  .catch(error => handle(error)); // Обработать любые возникшие ошибки

В своей простейшей форме новый API-интерфейс (fetch) для работы с HTTP представляет 
собой всего лишь функцию fetch(). Ей передается URL, а возвращает 
она объект Promise, который удовлетворяется, когда начинает поступать
HTTP-ответ, и становятся доступными состояние и заголовки HTTP:

fetch("/api/user/profile").then(response => {
  // Когда объект Promise разрешен, мы имеем состояние и заголовки,
  if (response.ok && response.headers.get("Content-Type") === "application/json") {
    // Что здесь можно сделать? Фактически у нас пока нет тела ответа
  }
});
- - - - -
Предпочтительная идиома предусматривает применение объектов
Promise в последовательной цепочке с помощью кода следующего вида:
fetch("/api/user/profile")
  .then(response => {
    return response.json();
  ))
  .then(profile => {
    displayUserProfile(profile);
  });
- - -
Давайте взглянем на вызовы методов в коде, проигнорировав передаваемые
им аргументы:
fetch().then().then()
- - -
Если мы где-то определим функции, передаваемые then(), то можем переписать
код следующим образом:
fetch(theURL) // задача 1; возвращает Promisel
.then(callbackl) // задача 2; возвращает Promise2
.then(callback2); // задача 3; возвращает Promise3
- - -
функция fetch() возвращает объект Promise, который
в случае удовлетворения передает объект ответа в зарегистрированную нами
функцию обратного вызова.

- - - promise.All() - - -
принимает на входе массив объектов Promise и возвращает объект Promise
Возвращенный объект Promise будет отклонен, если отклонен любой из вход,
ных объектов Promise. В противном случае он будет удовлетворен с массивом
значений, которыми удовлетворены все входные объекты Promise. Итак, например,
если вы хотите извлечь текстовое содержимое множества URL, то можете
применить код следующего вида:

//Мы начинаем с массива URL.
const urls = [ /* ноль или большее количество URL */ ];
// И преобразуем его в массив объектов Promise.
promises = urls.map(url => fetch(url).then(r => r.text()));
//Теперь получаем объект Promise для запуска всех объектов Promise параллельно
Promise.all (promises)
  .then (bodies => { /* делать что-нибудь с массивом строк */ })
  .catch(е => console.error(е));

- - -resolve reject- - -
Иногда вам может понадобиться реализовать существующий АР1-интерфейс
на основе Promise и возвращать объект Promise из функции, даже если выполняемое
вычисление в действительности не требует никаких асинхронных операций.
В таком случае статические методы Promise.resolve() и Promise.reject()
будут делать то, что вас интересует. Метод Promise.resolve() принимает значение
в своем единственном аргументе и возвращает объект Promise, который
будет немедленно (но асинхронно) удовлетворен в это значение. Аналогично
метод Promise.reject() принимает значение в единственном аргументе и
возвращает объект Promise, который будет отклонен с этим значением в качестве
причины. (Ради ясности: объекты Promise, возвращенные статическими
методами Promise.resolve() и Promise.reject(), не являются удовлетворенными
или отклоненными сразу по возврату, но будут удовлетворены или
отклонены немедленно после того, как завершит выполнение текущая синхронная
порция кода. Обычно подобное происходит в пределах нескольких миллисекунд,
если только не скопилось много незаконченных асинхронных задач,
ожидающих выполнения.)

- - -async await- - -
let response = await fetch ("/api/user/profile");
let profile = await response.json();
Критически важно прямо сейчас понять, что ключевое слово aw a it не заставляет
вашу программу блокироваться и буквально ничего не делать до тех
пор, пока указанный объект Promise не будет урегулирован. Код остается асинхронным
и await просто маскирует данный факт. Это означает, что любой код,
в котором применяется await, сам является асинхронным.

вы можете применять ключевое слово
await только внутри функций, которые были объявлены с ключевым словом
async

async function getHighScore() {
    let response = await fetch("/api/user/profile");
    let profile = await response.json();
    return profile.highScore;
}




