------------set-------------
let s = new Set(); // Новое пустое множество
let t = new Set([1, s]); // Новое множество с двумя членами
аргумент конструктора Set() не обязан быть массивом: разрешен любой
итерируемый объект (включая другие объекты Set):
let t = new Set(s); // Новое множество, которое копирует элементы s.
let unique = new Set ("Mississippi"); //4 элемента: "M", "i", "s" и "p"
Свойство size множества похоже на свойство length массива: оно сообщает нам, сколько значений содержит множество:
unique.size // => 4
Множества не нуждаются в инициализации при их создании. Вы можете в
любой момент добавлять и удалять элементы посредством add(), delete() и
clear(). Вспомните, что множества не могут содержать дубликаты, поэтому
добавление значения к множеству, когда такое значение уже содержится в нем,
оказывается безрезультатным:
let s = new Set (); // Начать с пустого множества
s.size // => О
sadd(1); // Добавить число
s.size // => 1; теперь множество имеет один член
s.add(1); // Добавить то же самое число еще раз
s.size // => 1; размер не изменился
s.add(true); // Добавить другое значение; обратите внимание на допустимость смешивания типов
s.size // => 2
s.add([1,2,3]); // Добавить значение типа массива
s.size // => 3; был добавлен массив, а не его элементы
s.delete(1) // => true: успешное удаление элемента 1
s.size // => 2: размер уменьшился до 2
s.delete("test") // => false: "test" не является членом, удаление терпит неудачу
s.delete(true) // => true: удаление прошло успешно
s.delete([1,2,3]) // => false: массив во множестве отличается
s.size // => 1: во множестве по-прежнему присутствует один массив
s.clear(); // Удалить все из множества
s.size // => О


На практике самое важное, что мы делаем с множествами — не добавление и
удаление элементов из них, а проверка, является ли указанное значение членом
множества. Для этого используется метод has():

let oneDigitPrimes = new Set([2,3,5,7]);
oneDigitPrimes.has(2) // => true: 2 - простое число с одной цифрой
oneDigitPrimes.has(3) // => true: то же касается 3
oneDigitPrimes.has(4) / / = > false: 4 - не простое число
oneDigitPrimes.has("5") // => false: ”5" - даже не число
-------класс Map-------------------
Объект Мар представляет набор значений, называемых ключами, где с каждым
ключом ассоциировано (или “отображено” на него) еще одно значение.
let m = new Мар(); // Новое пустое отображение
let n = new Мар([ // Новое отображение, которое инициализировано строковыми ключами, отображенными на числа
  ["one”, 1],
  ["two”, 2]
]);

Необязательным аргументом конструктора Мар() должен быть итерируемый
объект, который выдает массивы из двух элементов [ключ, значение].

let copy = new Map(n); // Новое отображение с такими же ключами и значениями, как у отображения n
let о = {х: 1, у: 2}; // Объект с двумя свойствами
let р = new Map(Object, entries (о)); // То же, что и new map([["х", 1], ["у", 2]])


let m = new Мар(); // Начать с пустого отображения
m.size // => 0: пустые отображения вообще не содержат ключей
m.set("one", 1); // Отобразить ключ "one" на значение 1
m.set("two", 2); // Отобразить ключ "two" на значение 2
m.size // => 2: теперь отображение имеет два ключа	
m.get("two”) // => 2: возвращается значение, ассоциированное с ключом "two"
m.get("three") //=> undefined: этот ключ отсутствует в отображении
m.set("one", true); // Изменить значение, ассоциированное с существующим ключом
m.size // => 2: размер не изменился
m.has("one") // => true: отображение имеет ключ "one"
m.has(true) // => false: отображение не содержит ключа true
m.delete("one") // => true: ключ существует, и удаление проходит успешно
m.size // => 1
m.delete("three") // => false: не удалось удалить несуществующий ключ
m.clear(); // Удалить все ключи и значения из отображения






























