Значение оператора yield становится значением, которое возвращается вызовом метода next()
итератора. Вот пример, который должен все прояснить:

// Генераторная функция, которая выдает набор простых чисел одной цифрой (с основанием 10) .
function* oneDigitPrimes() { // При вызове этой функции код не выполняется, а просто возвращается объект генератора Вызов метода next() данного генератора приводит к выполнению 				кода до тех пор, пока оператор yield не предоставит возвращаемое значение для метода next () .
  yield 2;
  yield 3;
  yield 5;
  yield 7;
}

// Когда мы вызываем генераторную функцию, то получаем генератор,
let primes = oneDigitPrimes() ;
// Генератор - это объект итератора, который проходит по выдаваемым значениям.
primes.next().value // => 2
primes.next().value // => 3
primes.next().value // => 5
primes.next().value // => 7
primes.next().done // => true

// Генераторы имеют метод Symbol.iterator, что делает их итерируемыми.
Primes[Symbol.iterator]() // => primes

// Мы можем использовать генераторы подобно другим итерируемым типам.
[...oneDigitPrimes()] // => [2,3,5,7]
let sum = 0 ;
for(let prime of oneDigitPrimes()) sum += prime;
sum // => 17

- - - - -
Однако подобно обыкновенным функциям мы можем определять
генераторы также в форме выражений. Нужно лишь поместить звездочку
после ключевого слова function :

const seq = function*(from,to) {
  for (let i = from; i <= to; i++) yield i;
};
[...seq(3,5)] // => [3, 4, 5]
- - - - -
В классах и объектных литералах можно применять сокращенную запись, полностью
опуская ключевое слово function при определении методов. Чтобы определить
генератор в таком контексте, мы просто используем звездочку перед именем
метода, где находилось бы ключевое слово function, если бы оно было указано:

let о = {
  х: 1, у: 2, z: 3,
  // Генератор, который выдает каждый ключ этого объекта.
  *g() {
    for(let key of Object, keys (this)) {
      yield key;
    }
   }
};
[...o.g()] // => ["x", "y", "z", "g"]

записать генераторную функцию с применением
синтаксиса стрелочных функций не удастся.
---числа Фибоначи через генератор---

function* fibonacciSequence() {
    let x = 0, у = 1;
    for(;;) {
      yield у;
      [x, у] = [у, x+у]; // Примечание: деструктурирующее присваивание-
    }
  }

  function fibonacci(n) {
    for(let f of fibonacciSequence()) {
      if (n-- <= 0) return f;
    }
  }
  console.log(fibonacci(20)) // => 10946

- - - - -
Бесконечный генератор подобного рода становится более полезным, когда
используется в генераторе take() следующего вида:
// Выдает первые n элементов указанного итерируемого объекта,
function* take(n, iterable) {
  let it = iterable[Symbol.iterator](); // Получить итератор для итерируемого объекта,
  while(n—- > 0) { // Цикл n раз:
    let next = it.next(); // Получить следующий элемент из итератора,
    if (next.done) return; // Если больше нет значений, тогда выполнить возврат раньше,
    else yield next.value; // иначе выдать значение.
  }
)
// Массив из первых пяти чисел Фибоначчи.
[...take(5, fibonacciSequence())] // => [1, 1, 2, 3, 5]






